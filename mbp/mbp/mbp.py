#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Aug 11 15:29:47 2018

@author: matthew.mu
"""

import numpy as np
import pandas as pd
import json
import requests
from PIL import Image
from io import BytesIO
from sklearn.cluster import KMeans
#import logging
import sys

from ortools.algorithms import pywrapknapsack_solver


class Knapsack(object):
    """a wrapper for pywrapknapsack_solver

    Attributes:
        weights (list): items weights
        values (list): items values
        capacity (float): capacity of bag
        dg (int): use to discretizatio (float->int by multiplying this factor + round)
        packed_items (list): what items are packed in the bag
        packed_weights (list): the weights of the items packed in bag
        bag_weight (float): the bag weight generated by the solution
    """
    
    def __init__(self, values, weights, capacity, dg=100):
        self.weights = weights
        self.values = values
        self.capacity = capacity
        self.dg = dg
        
    def solve(self):  
        # round to integers
        weights = [[int(w*self.dg) for w in self.weights]]
        values = [int(v*self.dg) for v in self.values]
        capacity = [int(self.capacity*self.dg)]
        
        solver = pywrapknapsack_solver.KnapsackSolver(
          pywrapknapsack_solver.KnapsackSolver.
          KNAPSACK_DYNAMIC_PROGRAMMING_SOLVER,
          'wmt')
        
        solver.Init(values, weights, capacity)
        _ = solver.Solve()
        
        # output the result
        self.packed_items = [x for x in range(0, len(weights[0]))
                                if solver.BestSolutionContains(x)]
        
        self.packed_weights = [self.weights[i] for i in self.packed_items]
        self.bag_weight = sum(self.packed_weights)
        

class OneBagPacker(object):
    """pack one bag"""
    
    def __init__(self, weights, capacity, dg=100):
        self.weights = weights
        self.capacity = capacity
        self.dg = dg
        self.values = [(1+w/(w+1))*w for w in self.weights] # key

    def pack(self):
        knapsack = Knapsack(self.values, self.weights, self.capacity, self.dg)
        knapsack.solve()
        self.packed_items = knapsack.packed_items
        self.bag_weight = knapsack.bag_weight


class OneBagPackerOpp(object):
    """pack one bag"""

    def __init__(self, weights, capacity, dg=100):
        self.weights = weights
        self.capacity = capacity
        self.dg = dg
        self.values = [1 for w in self.weights]  # key

    def pack(self):
        knapsack = Knapsack(self.values, self.weights, self.capacity, self.dg)
        knapsack.solve()
        self.packed_items = knapsack.packed_items
        self.bag_weight = knapsack.bag_weight
        
        
class MinBagPacker(object):
    """min bag packer"""
    
    def __init__(self, weights, capacity, dg=100):
        self.weights = weights
        self.capacity = capacity
        self.dg = dg
        self.n = len(weights)
        self.bag_weights=[]
        
    def greedy_pack(self):
        self.packing_result = np.array([-2]*self.n)
        
        # unpackables
        self.packing_result[[i for i in range(self.n) if self.weights[i]>self.capacity]] = -1
        self.item_bag_result = []
        
        bag_id = 0
        
        while sum(self.packing_result < -1.5) > 0: # all covered
            ids = [i for i in range(self.n) if self.packing_result[i]==-2] # ids to be packed
            obg = OneBagPacker([self.weights[i] for i in ids], self.capacity, self.dg)
            obg.pack()
            items_packed = [ids[i] for i in obg.packed_items]
            self.item_bag_result.append(items_packed)
            self.packing_result[items_packed] = bag_id
            bag_id += 1
            self.bag_weights.append(obg.bag_weight)

        self.packing_result = list(self.packing_result)